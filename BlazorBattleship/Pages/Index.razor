@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorBattleship.Shared
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>@currentGameState</PageTitle>



<div class="sidebar @(isSidebarOpen ? "open" : "")">
    <Sidebar Ships="ships" />
</div>

<button class="toggle-button" @onclick="ToggleSidebar"></button>

<div class="game-area @(isSidebarOpen ? "shifted" : "")">

    <div class="player-info">

        <div class="player-name">
            <h3>Your Name: @userName</h3>
        </div>

        <div class="opponent-name">
            <h3>Opponent: @opponent</h3>
        </div>

    </div>


@if ((currentGameState == GameState.Initial) || userName == "")
    {
        <div class="name-entry-container">
            <div class="name-entry-box">
                <label>
                    Enter your name:
                </label>
                <input @bind="userName" placeholder="Enter Your Name..." />
                <button class="play-buton" @onclick="(() => {
                    currentGameState = GameState.ChooseRoom;
                    InvokeAsync(StateHasChanged);
                })">Play</button>
            </div>
        </div>
    }

    @if (currentGameState == GameState.ChooseRoom)
    {
        <div class="rooms">
            <button class="join-room" @onclick="(() => JoinRoom(1))">@roomStatuses[0]</button>
            <button class="join-room" @onclick="(() => JoinRoom(2))">@roomStatuses[1]</button>
            <button class="join-room" @onclick="(() => JoinRoom(3))">@roomStatuses[2]</button>
            <button class="join-room" @onclick="(() => JoinRoom(4))">@roomStatuses[3]</button>
            <button class="join-room" @onclick="(() => JoinRoom(5))">@roomStatuses[4]</button>
        </div>
    }

    @if (currentGameState == GameState.PickShips)
    {
        <div class="num-ships">
            <label>Enter number of ships:</label>
            <input @bind="shipLimit" />
            <button @onclick="SendShipNum">Enter</button>
        </div>
    }

    @if (currentGameState == GameState.Waiting && shipLimit == 0)
    {
        <h1>@opponent is choosing the number of ships</h1>
    }

    @if (userName != "" && (currentGameState == GameState.Setup || currentGameState == GameState.Playing || currentGameState  == GameState.Waiting))
{
    // display either player is to be placing ships or "your board" if ships have been placed
        <div class="user-board @(currentGameState == GameState.Playing ? "minimized" : "normal")">
            <h3>@(currentGameState == GameState.Setup ? "Place your ships!" : "Your Board")</h3>

            <!-- Column Headers (numbers 1-10) -->
            <div class="column-headers">
                <div class="empty-space"></div> <!-- Empty space for row header -->
                <p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p>
            </div>

            <!-- Board layout (row headers + buttons) -->
            @for (int y = 0; y < 10; y++)
            {
                <div class="row">
                    <div class="letter">@letters[y]</div> <!-- Row header (letter) -->
                    @for (int x = 0; x < 10; x++)
                    {
                        int xCoord = x;
                        int yCoord = y;
                        <button class="square @(GetCellClass(xCoord, yCoord))"
                    @onclick='(() => { if(currentGameState == GameState.Setup && (shipCount < shipLimit)) PlaceShip(xCoord, yCoord, isShipHorizontal); })'
                    @onmouseover='(() => { if(currentGameState == GameState.Setup && (shipCount < shipLimit)) ShowShipPreview(xCoord, yCoord, isShipHorizontal); })'
                    @onmouseout='(() => { if(currentGameState == GameState.Setup && (shipCount < shipLimit)) HideShipPreview(xCoord, yCoord, isShipHorizontal); })'></button>
                    }
                </div>
            }
        </div>

    <!--Functional buttons-->
        @* button to toggle ship orientation (vertical/horizontal) *@
        <div>
            <button @onclick="ToggleShipOrientation">@((isShipHorizontal ? "Horizontal" : "Vertical") + " Placement")</button>
        </div>

        @if (currentGameState == GameState.Setup)
        {
            <button class="square" @onclick="SendReadyMessage">Start Game</button>
        }

        <div class="leave">
            <button @onclick="LeaveRoom" disabled="@(room == 0)">Leave Game</button>
        </div>
}

@if (player2Ready && room != 0)
{
    <div class="opponent-board @(currentGameState == GameState.Playing ? "enlarged" : "")">
        <h3>@(opponent)'s Board</h3>
        <div class="column-headers">
            <p /><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p>
        </div>
        @for (int y = 0; y < 10; y++)
        {
            <div class="row">
                <button class="letter" disabled>@letters[y]</button>
                @for (int x = 0; x < 10; x++)
                {
                    int xCoord = x;//Capturing x and y coordinates so that their values at button creation are preserved.
                    int yCoord = y;
                    <button 
                    class="@(OpponentBoardInfo(xCoord, yCoord))" 
                    @onclick='(() => {
                        SetCoordinates(xCoord, yCoord);
                    })'></button>
                }
            </div>
        }
    </div>

        <!-- Display selected coordinates in a text box -->
        <div class="fire-control">
            <button @onclick="Fire" disabled="@(!isTurn || !coordinates.HasValue || opponentDefaultBoard[coordinates.Value.x, coordinates.Value.y])">Fire</button>

            <!-- Display current selected coordinates -->
            <input type="text" value="@GetCoordinatesText()" readonly style="margin-left: 10px; width: 100px;" />
        </div>

        <ul id="messagesList">
            @foreach (var move in moves)
            {
                <li>@move</li>
            }
        </ul>
}
</div>

@code {
    #region Declarations
    #region Page Status
    private bool isSidebarOpen = false;
    #endregion
    #region Connection Information
    private HubConnection? hubConnection;
    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;
    public string[] roomStatuses = new string[5] { "Join Room 1", "Join Room 2", "Join Room 3", "Join Room 4", "Join Room 5" };
    private int room = 0;
    private bool player2Ready = false;
    #endregion
    #region Player Information
    private List<string> moves = new List<string>();
    private string userName = "";
    private (int x, int y)? coordinates = (0, 0);
    #endregion
    #region Boards
    // Game board tracking (10x10 grids for both players)
    private string letters = "ABCDEFGHIJ";
    private bool[,] playerBoard = new bool[10, 10]; // Stores player's ships
    private bool[,] previewBoard = new bool[10, 10]; // Stores ship previews
    private bool[,] opponentShots = new bool[10, 10]; // Stores the opponents previous shots
    private int[,] shipHPs = new int[10, 10];

    private bool[,] opponentBoard = new bool[10, 10]; // Stores hits/misses on opponent
    private bool[,] opponentDefaultBoard = new bool[10, 10]; // A default state for the opponents board when neither hit nor miss is recorded
    #endregion
    #region Game State Info
    private enum GameState { Initial, ChooseRoom, PickShips, Setup, Playing, Waiting, GameOver }
    private GameState currentGameState = GameState.Initial;
    private string currentPlayer = "";
    private string opponent = "";
    private bool isPlayer1 = false;
    #endregion
    #region Ship Parameters
    private Ship[]? ships;
    private bool isShipHorizontal = true; // To manage ship placement direction
    private int shipCount = 0;
    private static int shipLimit;
    private bool isTurn = false;
    #endregion
    #endregion

    private void ResetBoard(bool[,] board)
    {
        for (int i = 0; i < 10; i++)
        {
            for (int j = 0; j < 10; j++)
            {
                board[i, j] = false;
            }
        }
    }

    private void Reset()
    {
        room = 0;
        player2Ready = false;
        coordinates = (0, 0);
        opponent = "";
        isShipHorizontal = true;
        shipCount = 0;
        shipLimit = 0;
        isTurn = false;
        ResetBoard(playerBoard);
        ResetBoard(previewBoard);
        ResetBoard(opponentBoard);
        ResetBoard(opponentDefaultBoard);
        ResetBoard(opponentShots);
        while (moves.Count != 0)
        {
            moves.RemoveAt(moves.Count - 1);
        }
    }

    #region Modifier Functions
    private void SetCoordinates(int x, int y) //Sets the value of the coordinates tuple for later use
    {
        coordinates = (x, y);
    }
    private void ToggleShipOrientation() //Toggle ship orientation boolean to track whether or not a placed ship is vertical or horizontal
    {
        isShipHorizontal = !isShipHorizontal;
    }
    private void ToggleSidebar()
    {
        isSidebarOpen = !isSidebarOpen; //Toggles sidebar visibility
    }

    #region Board Modification
    #region Player Board
    private string GetCellClass(int x, int y)
    {
        /*Changes the type of grid space depending on whether or not a ship is currently there.
         * Effectively this allows for the preview to not override existing ships on the setup board.
        */
        if (playerBoard[x, y] && !opponentShots[x, y])//If there is a ship on this space and the opponent has not shot here yet
        {
            return "ship";//The space is of type ship
        }
        else if (playerBoard[x, y] && opponentShots[x, y])//If there is a ship on this space, and the opponent has shot here
        {
            return "hit";//The ship has been destroyed
        }
        else if (!playerBoard[x, y] && opponentShots[x, y])//If the opponent has shot a tile that does not have a ship on it
        {
            return "miss";//The opponent has missed
        }
        else if (previewBoard[x, y])//If the space has a preview of a ship
        {
            return "preview";//The space is of type preview
        }
        else//If none are true
        {
            return "square";//The space is blank
        }
    }

    private void ShowShipPreview(int startX, int startY, bool isHorizontal)
    {
        int shipLength = shipCount + 1;
        if (isHorizontal)
        {
            for (int i = 0; i < shipLength; i++)
            {
                if (startX + i < 10)
                {
                    previewBoard[startX + i, startY] = true;
                }
            }
        }
        else
        {
            for (int i = 0; i < shipLength; i++)
            {
                if (startY + i < 10)
                {
                    previewBoard[startX, startY + i] = true;
                }
            }
        }
    }

    private void HideShipPreview(int startX, int startY, bool isHorizontal)
    {
        int shipLength = shipCount + 1;
        if (isHorizontal)
        {
            for (int i = 0; i < shipLength; i++)
            {
                if (startX + i < 10)
                {
                    previewBoard[startX + i, startY] = false;
                }
            }
        }
        else
        {
            for (int i = 0; i < shipLength; i++)
            {
                if (startY + i < 10)
                {
                    previewBoard[startX, startY + i] = false;
                }
            }
        }
    }

    private void PlaceShip(int startX, int startY, bool isHorizontal)
    {
        int shipLength = shipCount + 1;
        List<(int x, int y)> coords = new List<(int x, int y)>();
        if (isHorizontal)
        {
            if (startX + shipLength <= 10)
            {
                for (int i = 0; i < shipLength; i++)
                {
                    coords.Add((startX + i, startY));
                    playerBoard[startX+i, startY] = true;
                }
                shipCount++;
            }
        }
        else
        {
            if (startY + shipLength <= 10)
            {

                for (int i = 0; i < shipLength; i++)
                {
                    coords.Add((startX, startY+i));
                    playerBoard[startX, startY+i] = true;
                }

                shipCount++;
            }
        }

        ships[shipCount - 1] = new Ship(shipCount, shipCount, $"Ship: {shipLength}", coords);

        if (shipCount >= shipLimit)
        {
            //currentGameState = GameState.Playing;
        }
    }

    #endregion
    #region Opponent Board
    private string OpponentBoardInfo(int x, int y)
    {
        if (coordinates.HasValue && coordinates.Value.x == x && coordinates.Value.y == y && !opponentDefaultBoard[x, y])
        {
            return "hit-preview";
        }
        else if (opponentDefaultBoard[x, y] && opponentBoard[x, y])
        {
            return "hit";
        }
        else if (opponentDefaultBoard[x, y] && !opponentBoard[x, y])
        {
            return "miss";
        }
        else
        {
            return "square";
        }
    }
    #endregion
    #endregion
    #endregion

    #region Accessor Functions
    // Helper function to display the selected coordinates in the text box
    private string GetCoordinatesText()
    {
        return coordinates.HasValue ? $"{coordinates.Value.x}, {coordinates.Value.y}" : "None";
    }
    #endregion

    #region Networking Functionality
    //  runs when client connects
    protected override async Task OnInitializedAsync()
    {
        // create a new connection to the hub
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .WithAutomaticReconnect()
            .Build();

        // when a new user has joined ANY of the rooms, update the page to show the new user in their room
        hubConnection.On<List<List<string>>>("ReceiveRooms", (playersInRooms) =>
        {
            for (int i = 0; i < 5; i++)
            {
                //System.Diagnostics.Debug.WriteLine(playersInRooms[i - 1].Count);
                if (playersInRooms[i].Count == 0)
                {
                    roomStatuses[i] = $"Room {i + 1} is empty";
                }
                if (playersInRooms[i].Count == 1)
                {
                    roomStatuses[i] = $"{playersInRooms[i][0]} is waiting";
                }
                if (playersInRooms[i].Count == 2 && playersInRooms[i].Contains(userName))
                {
                    if (playersInRooms[i][0] == userName)
                    {
                        isPlayer1 = true;
                        isTurn = true;
                        opponent = playersInRooms[i][1];
                        currentGameState = GameState.PickShips;
                    }
                    else
                    {
                        isPlayer1 = false;
                        isTurn = false;
                        opponent = playersInRooms[i][0];
                        currentGameState = GameState.Waiting;
                    }
                }
                else if (playersInRooms[i].Count == 2)
                {
                    roomStatuses[i] = $"{playersInRooms[i][0]} and {playersInRooms[i][1]} are playing";
                }
            }
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("PlayerLeft", (user) =>
        {
            moves.Add($"{user} has left the room.");
            currentGameState = GameState.Initial; // Or return to the lobby
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<int>("ReceiveShipNum", (sl) =>
        {
            shipLimit = sl;
            ships = new Ship[shipLimit];
            currentGameState = GameState.Setup;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On("ReceiveReadyMessage", () =>
        {
            player2Ready = true;
            InvokeAsync(StateHasChanged);
        });

        // update the page to show the new user

        // when a user and message are received from the connection...
        hubConnection.On<string, int, int>("ReceiveCoordinates", (user, x, y) =>
        {
            opponentShots[x, y] = true;
            currentGameState = GameState.Playing;
            Ship? hitShip = null;

            foreach (var ship in ships)
            {
                if(ship.IsHit(x,y))
                {
                    hitShip = ship;
                    break;
                }
            }

            if (hitShip != null)
            {
                hitShip.DeductHP();

                if (hitShip.IsDestroyed())
                {
                    var shipDestructionMessage = $"{hitShip.name} is destroyed!";
                    moves.Add(shipDestructionMessage);
                }
                else
                {
                    var shipHitMessage = $"Hit on {hitShip.name}! {hitShip.name} has {hitShip.hp} hit points left.";
                    moves.Add(shipHitMessage);
                }
            }

            hubConnection.SendAsync("SendHitMiss", room, playerBoard[x, y]);
            var shotMessage = $"{user} fires at {x} , {y}";
            moves.Add(shotMessage);
            isTurn = true;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<bool>("ShotResponse", (wasHit) =>
        {
            string message;

            if (coordinates.HasValue)
            {
                if (wasHit)
                {
                    message = $"Your Shot at {coordinates} was a hit!";
                    opponentBoard[coordinates.Value.x, coordinates.Value.y] = true;
                    opponentDefaultBoard[coordinates.Value.x, coordinates.Value.y] = true;
                    // Update board status for hit
                }
                else
                {
                    message = $" Your Shot at {coordinates} was a miss!";
                    opponentDefaultBoard[coordinates.Value.x, coordinates.Value.y] = true;
                }
                // Check if all ships are sunk for game over condition
                var formattedMessage = message;
                moves.Add(formattedMessage);
                InvokeAsync(StateHasChanged);
            }
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("GetRooms");
    }

    private async Task JoinRoom(int roomNum)
    {
        if (hubConnection is not null)
        {
            room = roomNum;
            await hubConnection.SendAsync("JoinRoom", userName, roomNum);
        }
    }

    private async Task LeaveRoom()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("LeaveRoom", userName, room);

            // Reset game state and room information locally
            currentGameState = GameState.ChooseRoom; // Return to room selection screen
            Reset(); // Clear game state (boards, ships, etc.)

            room = 0; // Reset room number
            isTurn = false; // Reset turn state
            player2Ready = false; // Reset opponent readiness
            opponent = ""; // Clear opponent name
        }
    }

    private async Task SendShipNum()
    {
        if (hubConnection is not null)
        {
            ships = new Ship[shipLimit];
            await hubConnection.SendAsync("SendShipNum", room, shipLimit);
        }
    }

    private async Task SendReadyMessage()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendReadyMessage", room, shipLimit);
            currentGameState = GameState.Setup;
        }
    }

    private async Task Fire()
    {
        if (hubConnection is not null && coordinates.HasValue)
        {
            await hubConnection.SendAsync("SendCoordinates", userName, room, coordinates.Value.x, coordinates.Value.y);
            currentGameState = GameState.Waiting;
            isTurn = false;
            //StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    #endregion
    //End C# code
}
